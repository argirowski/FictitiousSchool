ðŸŽ¯ Build a Fictitious School App

ðŸ“Œ What Youâ€™ll Be Doing
You will create an application form for a fictitious school to accept applications from companies interested in attending their courses.
Each course is available on different dates. All applications must be saved in a database and include the following details:

ðŸ“Œ Course Information:
ðŸ”¹ Course ID
ðŸ”¹ Course Date

ðŸ“Œ Company Information:
ðŸ”¹ Company Name
ðŸ”¹ Company Phone Number
ðŸ”¹ Company Email

ðŸ“Œ Participant Information:
1 or more participants, each consisting of:
ðŸ”¹ Name
ðŸ”¹ Phone Number
ðŸ”¹ Email

ðŸ“Œ Expectations
âœ” Build the signup flow using Microsoft .NET Core, C#, and related backend technologies.
âœ” Use any frontend stack you are comfortable with; we prefer React for the UI, but any SPA technology works.
âœ” Define a suitable database structure and implement appropriate design patterns.
âœ” For the backend, use the Clean (Onion) architecture.
âœ” Include a README to describe how to get the application up and running.

ðŸ“Œ Delivery
âœ… Host the code as a repository on GitHub or any other Git-based service under your profile (set to private)
âœ… During our meeting, walk us through the code and explain your choices regarding frameworks, data structure, architecture, and your overall approach.

ðŸ“Œ Resources
âœ… Design Files: Available in the design folder.
âœ… Courses Data: Available as JSON in the endpoints folder.
âœ… Font: Source Sans Pro.

ðŸ’¡ If You Have Time
These additional items are optional, but if completed, they will be reviewed along with the base work sample:
âœ… API with Endpoints: Create an API to expose the data/applications. Document it with tools like Swagger to allow the school's IT systems to consume it.
âœ… Minimize Spam: Implement strategies to reduce spam submissions in the form.

ðŸŽ‰ Have Fun!
This test is about understanding how you approach and implement a common task. Itâ€™s not about pointing fingers or finding faultsâ€”weâ€™re excited to see how you think and create!