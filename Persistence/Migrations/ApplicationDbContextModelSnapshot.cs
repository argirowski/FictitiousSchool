// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cutting trees, the ins and outs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CSS and you - a love story"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Baking mud cakes using actual mud"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Christmas eve - myth or reality?"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LEGO colors through time"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CourseDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49ed75aa-0a08-40c8-92ed-cd88a68f564d"),
                            CourseId = 1,
                            Date = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5cd91938-abc4-440f-b3c1-52371516bf8d"),
                            CourseId = 1,
                            Date = new DateTime(2017, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8f516d6a-e1b3-4d66-b0d7-f9b40cdcdb04"),
                            CourseId = 2,
                            Date = new DateTime(2017, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("587cdc3e-40a8-43f1-b67e-251292d94f3e"),
                            CourseId = 2,
                            Date = new DateTime(2017, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f0ca2d3e-554f-459e-9045-dce2d5ab616b"),
                            CourseId = 2,
                            Date = new DateTime(2017, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ea3cf94a-7ab6-4347-a0a2-b8f32d2ba51b"),
                            CourseId = 3,
                            Date = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2b7d2ae2-0214-42a0-be07-f6f7bcdb8064"),
                            CourseId = 3,
                            Date = new DateTime(2018, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8de1a562-ca5c-4dd3-9961-4b03650a6e47"),
                            CourseId = 3,
                            Date = new DateTime(2017, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7cbf70c1-5cd9-435d-b39d-cd6bcd3bd7ee"),
                            CourseId = 3,
                            Date = new DateTime(2019, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("361b541c-c1af-46c6-b28f-7576d87bd51c"),
                            CourseId = 4,
                            Date = new DateTime(2017, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("48e2f6e5-e7a5-4861-9563-4823774a6b5c"),
                            CourseId = 4,
                            Date = new DateTime(2018, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c694a722-4015-45ed-8f79-628b6050e664"),
                            CourseId = 4,
                            Date = new DateTime(2019, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("84dc067d-b953-42a2-afd2-fbbf4ef781f8"),
                            CourseId = 5,
                            Date = new DateTime(2017, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.FictitiousSchoolApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CourseDateId");

                    b.HasIndex("CourseId");

                    b.ToTable("SubmitApplications");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubmitApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubmitApplicationId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Domain.Entities.CourseDate", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("CourseDates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.FictitiousSchoolApplication", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CourseDate", "CourseDate")
                        .WithMany()
                        .HasForeignKey("CourseDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Course");

                    b.Navigation("CourseDate");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.HasOne("Domain.Entities.FictitiousSchoolApplication", null)
                        .WithMany("Participants")
                        .HasForeignKey("SubmitApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseDates");
                });

            modelBuilder.Entity("Domain.Entities.FictitiousSchoolApplication", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
